/*
 * @lc app=leetcode.cn id=212 lang=javascript
 *
 * [212] 单词搜索 II
 */

// @lc code=start
// /**
//  * @param {character[][]} board
//  * @param {string[]} words
//  * @return {string[]}
//  */
// var findWords = function (board, words) {
//   const res = new Set() // 使用 Set 避免重复
//   if (!board.length) return [...res]

//   const m = board[0].length
//   const n = board.length

//   // 创建一个包含所有字母的集合
//   const charSet = new Set(board.flat())

//   // 筛选出可能的单词
//   const needSearch = words.filter((word) => {
//     return [...new Set(word)].every((char) => charSet.has(char))
//   })

//   const isFindWord = (word, wi, bi, bj, visited) => {
//     if (wi === word.length) return true // 找到完整单词
//     if (bi < 0 || bi >= n || bj < 0 || bj >= m || board[bi][bj] !== word[wi] || visited.has(`${bi},${bj}`)) {
//       return false
//     }

//     visited.add(`${bi},${bj}`) // 标记为已访问
//     const found =
//       isFindWord(word, wi + 1, bi - 1, bj, visited) || // 上
//       isFindWord(word, wi + 1, bi + 1, bj, visited) || // 下
//       isFindWord(word, wi + 1, bi, bj - 1, visited) || // 左
//       isFindWord(word, wi + 1, bi, bj + 1, visited) // 右
//     visited.delete(`${bi},${bj}`) // 回溯
//     return found
//   }

//   // 遍历每个字符作为起始点
//   for (let i = 0; i < n; i++) {
//     for (let j = 0; j < m; j++) {
//       for (const current of needSearch) {
//         if (res.has(current)) continue // 已找到的单词跳过
//         if (isFindWord(current, 0, i, j, new Set())) {
//           res.add(current)
//         }
//       }
//     }
//   }

//   return [...res] // 返回结果数组
// }

// @lc code=start

class Trie {
  constructor() {
    this.node = {}
    this.isEndNode = false
  }
  inset(word) {
    let node = this.node
    for (let i = 0; i < word.length; i++) {
      const current = word[i]
      if (!node[current]) {
        node[current] = {}
      }
      node = node[current]
    }
    node.isEndNode = true
  }
}

/**
 * @param {character[][]} board
 * @param {string[]} words
 * @return {string[]}
 */
var findWords = function (board, words) {
  if (!board.length || !words.length) {
    return []
  }
  // 过滤掉字母超出board范围的
  const charSet = new Set(board.flat())
  const needSearch = words.filter((word) => {
    return [...new Set(word)].every((char) => charSet.has(char))
  })
  // 搜索树
  const trie = new Trie()
  needSearch.forEach((w) => {
    trie.inset(w)
  })
  console.log(trie)

  // 搜索结果
  const findTree = (node, row, col, word) => {
    //搜索结束添加结果
    if (node.isEndNode) {
      res.add(word)
      node.isEndNode = false //防止重复添加
    }
    if (row < 0 || row >= rows || col < 0 || col >= cols) {
      return
    }
    const current = board[row][col]
    if (node[current]) {
      //标记
      board[row][col] = '@'
      //继续搜索上下左右
      findTree(node[current], row - 1, col, word + current)
      findTree(node[current], row + 1, col, word + current)
      findTree(node[current], row, col - 1, word + current)
      findTree(node[current], row, col + 1, word + current)
      //取消标记
      board[row][col] = current
    }
  }

  const res = new Set()
  const rows = board.length
  const cols = board[0].length
  for (let i = 0; i < rows; i++)
    for (let j = 0; j < cols; j++) {
      findTree(trie.node, i, j, '')
    }
  return [...res]
}

// 测试示例
const board2 = [
  ['o', 'a', 'a', 'n'],
  ['e', 't', 'a', 'e'],
  ['i', 'h', 'k', 'r'],
  ['i', 'f', 'l', 'v'],
]
const words2 = ['oath', 'pea', 'eat', 'rain']

console.log(findWords(board2, words2)) // 应输出 ['oath', 'eat']

// @lc code=end

const board1 = [
  ['m', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'],
  ['n', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'],
  ['o', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'],
  ['p', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'],
  ['q', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'],
  ['r', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'],
  ['s', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'],
  ['t', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'],
  ['u', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'],
  ['v', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'],
  ['w', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'],
  ['x', 'y', 'z', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'],
]
const words1 = [
  'aaaaaaaaaa',
  'aaaaaaaaab',
  'aaaaaaaaac',
  'aaaaaaaaad',
  'aaaaaaaaae',
  'aaaaaaaaaf',
  'aaaaaaaaag',
  'aaaaaaaaah',
  'aaaaaaaaai',
  'aaaaaaaaaj',
  'aaaaaaaaak',
  'aaaaaaaaal',
  'aaaaaaaaam',
  'aaaaaaaaan',
  'aaaaaaaaao',
  'aaaaaaaaap',
  'aaaaaaaaaq',
  'aaaaaaaaar',
  'aaaaaaaaas',
  'aaaaaaaaat',
  'aaaaaaaaau',
  'aaaaaaaaav',
  'aaaaaaaaaw',
  'aaaaaaaaax',
  'aaaaaaaaay',
  'aaaaaaaaaz',
  'aaaaaaaaba',
  'aaaaaaaabb',
  'aaaaaaaabc',
  'aaaaaaaabd',
  'aaaaaaaabe',
  'aaaaaaaabf',
  'aaaaaaaabg',
  'aaaaaaaabh',
  'aaaaaaaabi',
  'aaaaaaaabj',
  'aaaaaaaabk',
  'aaaaaaaabl',
  'aaaaaaaabm',
  'aaaaaaaabn',
  'aaaaaaaabo',
  'aaaaaaaabp',
  'aaaaaaaabq',
  'aaaaaaaabr',
  'aaaaaaaabs',
  'aaaaaaaabt',
  'aaaaaaaabu',
  'aaaaaaaabv',
  'aaaaaaaabw',
  'aaaaaaaabx',
  'aaaaaaaaby',
  'aaaaaaaabz',
  'aaaaaaaaca',
  'aaaaaaaacb',
  'aaaaaaaacc',
  'aaaaaaaacd',
  'aaaaaaaace',
  'aaaaaaaacf',
  'aaaaaaaacg',
  'aaaaaaaach',
  'aaaaaaaaci',
  'aaaaaaaacj',
  'aaaaaaaack',
  'aaaaaaaacl',
  'aaaaaaaacm',
  'aaaaaaaacn',
  'aaaaaaaaco',
  'aaaaaaaacp',
  'aaaaaaaacq',
  'aaaaaaaacr',
  'aaaaaaaacs',
  'aaaaaaaact',
  'aaaaaaaacu',
  'aaaaaaaacv',
  'aaaaaaaacw',
  'aaaaaaaacx',
  'aaaaaaaacy',
  'aaaaaaaacz',
  'aaaaaaaada',
  'aaaaaaaadb',
  'aaaaaaaadc',
  'aaaaaaaadd',
  'aaaaaaaade',
  'aaaaaaaadf',
  'aaaaaaaadg',
  'aaaaaaaadh',
  'aaaaaaaadi',
  'aaaaaaaadj',
  'aaaaaaaadk',
  'aaaaaaaadl',
  'aaaaaaaadm',
  'aaaaaaaadn',
  'aaaaaaaado',
  'aaaaaaaadp',
  'aaaaaaaadq',
  'aaaaaaaadr',
  'aaaaaaaads',
  'aaaaaaaadt',
  'aaaaaaaadu',
  'aaaaaaaadv',
  'aaaaaaaadw',
  'aaaaaaaadx',
  'aaaaaaaady',
  'aaaaaaaadz',
  'aaaaaaaaea',
  'aaaaaaaaeb',
  'aaaaaaaaec',
  'aaaaaaaaed',
  'aaaaaaaaee',
  'aaaaaaaaef',
  'aaaaaaaaeg',
  'aaaaaaaaeh',
  'aaaaaaaaei',
  'aaaaaaaaej',
  'aaaaaaaaek',
  'aaaaaaaael',
  'aaaaaaaaem',
  'aaaaaaaaen',
  'aaaaaaaaeo',
  'aaaaaaaaep',
  'aaaaaaaaeq',
  'aaaaaaaaer',
  'aaaaaaaaes',
  'aaaaaaaaet',
  'aaaaaaaaeu',
  'aaaaaaaaev',
  'aaaaaaaaew',
  'aaaaaaaaex',
  'aaaaaaaaey',
  'aaaaaaaaez',
  'aaaaaaaafa',
  'aaaaaaaafb',
  'aaaaaaaafc',
  'aaaaaaaafd',
  'aaaaaaaafe',
  'aaaaaaaaff',
  'aaaaaaaafg',
  'aaaaaaaafh',
  'aaaaaaaafi',
  'aaaaaaaafj',
  'aaaaaaaafk',
  'aaaaaaaafl',
  'aaaaaaaafm',
  'aaaaaaaafn',
  'aaaaaaaafo',
  'aaaaaaaafp',
  'aaaaaaaafq',
  'aaaaaaaafr',
  'aaaaaaaafs',
  'aaaaaaaaft',
  'aaaaaaaafu',
  'aaaaaaaafv',
  'aaaaaaaafw',
  'aaaaaaaafx',
  'aaaaaaaafy',
  'aaaaaaaafz',
  'aaaaaaaaga',
  'aaaaaaaagb',
  'aaaaaaaagc',
  'aaaaaaaagd',
  'aaaaaaaage',
  'aaaaaaaagf',
  'aaaaaaaagg',
  'aaaaaaaagh',
  'aaaaaaaagi',
  'aaaaaaaagj',
  'aaaaaaaagk',
  'aaaaaaaagl',
  'aaaaaaaagm',
  'aaaaaaaagn',
  'aaaaaaaago',
  'aaaaaaaagp',
  'aaaaaaaagq',
  'aaaaaaaagr',
  'aaaaaaaags',
  'aaaaaaaagt',
  'aaaaaaaagu',
  'aaaaaaaagv',
  'aaaaaaaagw',
  'aaaaaaaagx',
  'aaaaaaaagy',
  'aaaaaaaagz',
  'aaaaaaaaha',
  'aaaaaaaahb',
  'aaaaaaaahc',
  'aaaaaaaahd',
  'aaaaaaaahe',
  'aaaaaaaahf',
  'aaaaaaaahg',
  'aaaaaaaahh',
  'aaaaaaaahi',
  'aaaaaaaahj',
  'aaaaaaaahk',
  'aaaaaaaahl',
  'aaaaaaaahm',
  'aaaaaaaahn',
  'aaaaaaaaho',
  'aaaaaaaahp',
  'aaaaaaaahq',
  'aaaaaaaahr',
  'aaaaaaaahs',
  'aaaaaaaaht',
  'aaaaaaaahu',
  'aaaaaaaahv',
  'aaaaaaaahw',
  'aaaaaaaahx',
  'aaaaaaaahy',
  'aaaaaaaahz',
  'aaaaaaaaia',
  'aaaaaaaaib',
  'aaaaaaaaic',
  'aaaaaaaaid',
  'aaaaaaaaie',
  'aaaaaaaaif',
  'aaaaaaaaig',
  'aaaaaaaaih',
  'aaaaaaaaii',
  'aaaaaaaaij',
  'aaaaaaaaik',
  'aaaaaaaail',
  'aaaaaaaaim',
  'aaaaaaaain',
  'aaaaaaaaio',
  'aaaaaaaaip',
  'aaaaaaaaiq',
  'aaaaaaaair',
  'aaaaaaaais',
  'aaaaaaaait',
  'aaaaaaaaiu',
  'aaaaaaaaiv',
  'aaaaaaaaiw',
  'aaaaaaaaix',
  'aaaaaaaaiy',
  'aaaaaaaaiz',
  'aaaaaaaaja',
  'aaaaaaaajb',
  'aaaaaaaajc',
  'aaaaaaaajd',
  'aaaaaaaaje',
  'aaaaaaaajf',
  'aaaaaaaajg',
  'aaaaaaaajh',
  'aaaaaaaaji',
  'aaaaaaaajj',
  'aaaaaaaajk',
  'aaaaaaaajl',
  'aaaaaaaajm',
  'aaaaaaaajn',
  'aaaaaaaajo',
  'aaaaaaaajp',
  'aaaaaaaajq',
  'aaaaaaaajr',
  'aaaaaaaajs',
  'aaaaaaaajt',
  'aaaaaaaaju',
  'aaaaaaaajv',
  'aaaaaaaajw',
  'aaaaaaaajx',
  'aaaaaaaajy',
  'aaaaaaaajz',
  'aaaaaaaaka',
  'aaaaaaaakb',
  'aaaaaaaakc',
  'aaaaaaaakd',
  'aaaaaaaake',
  'aaaaaaaakf',
  'aaaaaaaakg',
  'aaaaaaaakh',
  'aaaaaaaaki',
  'aaaaaaaakj',
  'aaaaaaaakk',
  'aaaaaaaakl',
  'aaaaaaaakm',
  'aaaaaaaakn',
  'aaaaaaaako',
  'aaaaaaaakp',
  'aaaaaaaakq',
  'aaaaaaaakr',
  'aaaaaaaaks',
  'aaaaaaaakt',
  'aaaaaaaaku',
  'aaaaaaaakv',
  'aaaaaaaakw',
  'aaaaaaaakx',
  'aaaaaaaaky',
  'aaaaaaaakz',
  'aaaaaaaala',
  'aaaaaaaalb',
  'aaaaaaaalc',
  'aaaaaaaald',
  'aaaaaaaale',
  'aaaaaaaalf',
  'aaaaaaaalg',
  'aaaaaaaalh',
  'aaaaaaaali',
  'aaaaaaaalj',
  'aaaaaaaalk',
  'aaaaaaaall',
  'aaaaaaaalm',
  'aaaaaaaaln',
  'aaaaaaaalo',
  'aaaaaaaalp',
  'aaaaaaaalq',
  'aaaaaaaalr',
  'aaaaaaaals',
  'aaaaaaaalt',
  'aaaaaaaalu',
  'aaaaaaaalv',
  'aaaaaaaalw',
  'aaaaaaaalx',
  'aaaaaaaaly',
  'aaaaaaaalz',
  'aaaaaaaama',
  'aaaaaaaamb',
  'aaaaaaaamc',
  'aaaaaaaamd',
  'aaaaaaaame',
  'aaaaaaaamf',
  'aaaaaaaamg',
  'aaaaaaaamh',
  'aaaaaaaami',
  'aaaaaaaamj',
  'aaaaaaaamk',
  'aaaaaaaaml',
  'aaaaaaaamm',
  'aaaaaaaamn',
  'aaaaaaaamo',
  'aaaaaaaamp',
  'aaaaaaaamq',
  'aaaaaaaamr',
  'aaaaaaaams',
  'aaaaaaaamt',
  'aaaaaaaamu',
  'aaaaaaaamv',
  'aaaaaaaamw',
  'aaaaaaaamx',
  'aaaaaaaamy',
  'aaaaaaaamz',
  'aaaaaaaana',
  'aaaaaaaanb',
  'aaaaaaaanc',
  'aaaaaaaand',
  'aaaaaaaane',
  'aaaaaaaanf',
  'aaaaaaaang',
  'aaaaaaaanh',
  'aaaaaaaani',
  'aaaaaaaanj',
  'aaaaaaaank',
  'aaaaaaaanl',
  'aaaaaaaanm',
  'aaaaaaaann',
  'aaaaaaaano',
  'aaaaaaaanp',
  'aaaaaaaanq',
  'aaaaaaaanr',
  'aaaaaaaans',
  'aaaaaaaant',
  'aaaaaaaanu',
  'aaaaaaaanv',
  'aaaaaaaanw',
  'aaaaaaaanx',
  'aaaaaaaany',
  'aaaaaaaanz',
  'aaaaaaaaoa',
  'aaaaaaaaob',
  'aaaaaaaaoc',
  'aaaaaaaaod',
  'aaaaaaaaoe',
  'aaaaaaaaof',
  'aaaaaaaaog',
  'aaaaaaaaoh',
  'aaaaaaaaoi',
  'aaaaaaaaoj',
  'aaaaaaaaok',
  'aaaaaaaaol',
  'aaaaaaaaom',
  'aaaaaaaaon',
  'aaaaaaaaoo',
  'aaaaaaaaop',
  'aaaaaaaaoq',
  'aaaaaaaaor',
  'aaaaaaaaos',
  'aaaaaaaaot',
  'aaaaaaaaou',
  'aaaaaaaaov',
  'aaaaaaaaow',
  'aaaaaaaaox',
  'aaaaaaaaoy',
  'aaaaaaaaoz',
  'aaaaaaaapa',
  'aaaaaaaapb',
  'aaaaaaaapc',
  'aaaaaaaapd',
  'aaaaaaaape',
  'aaaaaaaapf',
  'aaaaaaaapg',
  'aaaaaaaaph',
  'aaaaaaaapi',
  'aaaaaaaapj',
  'aaaaaaaapk',
  'aaaaaaaapl',
  'aaaaaaaapm',
  'aaaaaaaapn',
  'aaaaaaaapo',
  'aaaaaaaapp',
  'aaaaaaaapq',
  'aaaaaaaapr',
  'aaaaaaaaps',
  'aaaaaaaapt',
  'aaaaaaaapu',
  'aaaaaaaapv',
  'aaaaaaaapw',
  'aaaaaaaapx',
  'aaaaaaaapy',
  'aaaaaaaapz',
  'aaaaaaaaqa',
  'aaaaaaaaqb',
  'aaaaaaaaqc',
  'aaaaaaaaqd',
  'aaaaaaaaqe',
  'aaaaaaaaqf',
  'aaaaaaaaqg',
  'aaaaaaaaqh',
  'aaaaaaaaqi',
  'aaaaaaaaqj',
  'aaaaaaaaqk',
  'aaaaaaaaql',
  'aaaaaaaaqm',
  'aaaaaaaaqn',
  'aaaaaaaaqo',
  'aaaaaaaaqp',
  'aaaaaaaaqq',
  'aaaaaaaaqr',
  'aaaaaaaaqs',
  'aaaaaaaaqt',
  'aaaaaaaaqu',
  'aaaaaaaaqv',
  'aaaaaaaaqw',
  'aaaaaaaaqx',
  'aaaaaaaaqy',
  'aaaaaaaaqz',
  'aaaaaaaara',
  'aaaaaaaarb',
  'aaaaaaaarc',
  'aaaaaaaard',
  'aaaaaaaare',
  'aaaaaaaarf',
  'aaaaaaaarg',
  'aaaaaaaarh',
  'aaaaaaaari',
  'aaaaaaaarj',
  'aaaaaaaark',
  'aaaaaaaarl',
  'aaaaaaaarm',
  'aaaaaaaarn',
  'aaaaaaaaro',
  'aaaaaaaarp',
  'aaaaaaaarq',
  'aaaaaaaarr',
  'aaaaaaaars',
  'aaaaaaaart',
  'aaaaaaaaru',
  'aaaaaaaarv',
  'aaaaaaaarw',
  'aaaaaaaarx',
  'aaaaaaaary',
  'aaaaaaaarz',
  'aaaaaaaasa',
  'aaaaaaaasb',
  'aaaaaaaasc',
  'aaaaaaaasd',
  'aaaaaaaase',
  'aaaaaaaasf',
  'aaaaaaaasg',
  'aaaaaaaash',
  'aaaaaaaasi',
  'aaaaaaaasj',
  'aaaaaaaask',
  'aaaaaaaasl',
  'aaaaaaaasm',
  'aaaaaaaasn',
  'aaaaaaaaso',
  'aaaaaaaasp',
  'aaaaaaaasq',
  'aaaaaaaasr',
  'aaaaaaaass',
  'aaaaaaaast',
  'aaaaaaaasu',
  'aaaaaaaasv',
  'aaaaaaaasw',
  'aaaaaaaasx',
  'aaaaaaaasy',
  'aaaaaaaasz',
  'aaaaaaaata',
  'aaaaaaaatb',
  'aaaaaaaatc',
  'aaaaaaaatd',
  'aaaaaaaate',
  'aaaaaaaatf',
  'aaaaaaaatg',
  'aaaaaaaath',
  'aaaaaaaati',
  'aaaaaaaatj',
  'aaaaaaaatk',
  'aaaaaaaatl',
  'aaaaaaaatm',
  'aaaaaaaatn',
  'aaaaaaaato',
  'aaaaaaaatp',
  'aaaaaaaatq',
  'aaaaaaaatr',
  'aaaaaaaats',
  'aaaaaaaatt',
  'aaaaaaaatu',
  'aaaaaaaatv',
  'aaaaaaaatw',
  'aaaaaaaatx',
  'aaaaaaaaty',
  'aaaaaaaatz',
  'aaaaaaaaua',
  'aaaaaaaaub',
  'aaaaaaaauc',
  'aaaaaaaaud',
  'aaaaaaaaue',
  'aaaaaaaauf',
  'aaaaaaaaug',
  'aaaaaaaauh',
  'aaaaaaaaui',
  'aaaaaaaauj',
  'aaaaaaaauk',
  'aaaaaaaaul',
  'aaaaaaaaum',
  'aaaaaaaaun',
  'aaaaaaaauo',
  'aaaaaaaaup',
  'aaaaaaaauq',
  'aaaaaaaaur',
  'aaaaaaaaus',
  'aaaaaaaaut',
  'aaaaaaaauu',
  'aaaaaaaauv',
  'aaaaaaaauw',
  'aaaaaaaaux',
  'aaaaaaaauy',
  'aaaaaaaauz',
  'aaaaaaaava',
  'aaaaaaaavb',
  'aaaaaaaavc',
  'aaaaaaaavd',
  'aaaaaaaave',
  'aaaaaaaavf',
  'aaaaaaaavg',
  'aaaaaaaavh',
  'aaaaaaaavi',
  'aaaaaaaavj',
  'aaaaaaaavk',
  'aaaaaaaavl',
  'aaaaaaaavm',
  'aaaaaaaavn',
  'aaaaaaaavo',
  'aaaaaaaavp',
  'aaaaaaaavq',
  'aaaaaaaavr',
  'aaaaaaaavs',
  'aaaaaaaavt',
  'aaaaaaaavu',
  'aaaaaaaavv',
  'aaaaaaaavw',
  'aaaaaaaavx',
  'aaaaaaaavy',
  'aaaaaaaavz',
  'aaaaaaaawa',
  'aaaaaaaawb',
  'aaaaaaaawc',
  'aaaaaaaawd',
  'aaaaaaaawe',
  'aaaaaaaawf',
  'aaaaaaaawg',
  'aaaaaaaawh',
  'aaaaaaaawi',
  'aaaaaaaawj',
  'aaaaaaaawk',
  'aaaaaaaawl',
  'aaaaaaaawm',
  'aaaaaaaawn',
  'aaaaaaaawo',
  'aaaaaaaawp',
  'aaaaaaaawq',
  'aaaaaaaawr',
  'aaaaaaaaws',
  'aaaaaaaawt',
  'aaaaaaaawu',
  'aaaaaaaawv',
  'aaaaaaaaww',
  'aaaaaaaawx',
  'aaaaaaaawy',
  'aaaaaaaawz',
  'aaaaaaaaxa',
  'aaaaaaaaxb',
  'aaaaaaaaxc',
  'aaaaaaaaxd',
  'aaaaaaaaxe',
  'aaaaaaaaxf',
  'aaaaaaaaxg',
  'aaaaaaaaxh',
  'aaaaaaaaxi',
  'aaaaaaaaxj',
  'aaaaaaaaxk',
  'aaaaaaaaxl',
  'aaaaaaaaxm',
  'aaaaaaaaxn',
  'aaaaaaaaxo',
  'aaaaaaaaxp',
  'aaaaaaaaxq',
  'aaaaaaaaxr',
  'aaaaaaaaxs',
  'aaaaaaaaxt',
  'aaaaaaaaxu',
  'aaaaaaaaxv',
  'aaaaaaaaxw',
  'aaaaaaaaxx',
  'aaaaaaaaxy',
  'aaaaaaaaxz',
  'aaaaaaaaya',
  'aaaaaaaayb',
  'aaaaaaaayc',
  'aaaaaaaayd',
  'aaaaaaaaye',
  'aaaaaaaayf',
  'aaaaaaaayg',
  'aaaaaaaayh',
  'aaaaaaaayi',
  'aaaaaaaayj',
  'aaaaaaaayk',
  'aaaaaaaayl',
  'aaaaaaaaym',
  'aaaaaaaayn',
  'aaaaaaaayo',
  'aaaaaaaayp',
  'aaaaaaaayq',
  'aaaaaaaayr',
  'aaaaaaaays',
  'aaaaaaaayt',
  'aaaaaaaayu',
  'aaaaaaaayv',
  'aaaaaaaayw',
  'aaaaaaaayx',
  'aaaaaaaayy',
  'aaaaaaaayz',
  'aaaaaaaaza',
  'aaaaaaaazb',
  'aaaaaaaazc',
  'aaaaaaaazd',
  'aaaaaaaaze',
  'aaaaaaaazf',
  'aaaaaaaazg',
  'aaaaaaaazh',
  'aaaaaaaazi',
  'aaaaaaaazj',
  'aaaaaaaazk',
  'aaaaaaaazl',
  'aaaaaaaazm',
  'aaaaaaaazn',
  'aaaaaaaazo',
  'aaaaaaaazp',
  'aaaaaaaazq',
  'aaaaaaaazr',
  'aaaaaaaazs',
  'aaaaaaaazt',
  'aaaaaaaazu',
  'aaaaaaaazv',
  'aaaaaaaazw',
  'aaaaaaaazx',
  'aaaaaaaazy',
  'aaaaaaaazz',
]
console.log(findWords(board1, words1))
